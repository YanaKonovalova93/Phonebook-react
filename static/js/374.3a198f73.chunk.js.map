{"version":3,"file":"static/js/374.3a198f73.chunk.js","mappings":"4NAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAAnB,EAErBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAMtBC,EAAe,SAAAL,GAAK,OAAIA,EAAMM,MAAV,E,6BCNpBC,EAAOC,EAAAA,EAAAA,GAAH,+G,UCIJC,EAAe,WAC1B,IAAMR,GAAWS,EAAAA,EAAAA,IAAYP,GACvBG,GAASI,EAAAA,EAAAA,IAAYL,GACrBM,GAAWC,EAAAA,EAAAA,MAUXC,EARsB,WAC1B,GAAIZ,EACF,OAAOA,EAASK,QAAO,SAACQ,GAAD,OACrBA,EAAQC,KAAKC,cAAcC,SAASX,EAAOU,cADtB,GAI1B,CAEwBE,GAGzB,OACE,wBACGL,EAAiBM,KAAI,SAAAC,GACpB,OACE,UAACb,EAAD,WACGa,EAAKL,KADR,KACgBK,EAAKC,QACnB,mBACEC,QAAS,WACPX,GAASY,EAAAA,EAAAA,IAAcH,EAAKI,IAC7B,EAHH,sBAFSJ,EAAKI,GAWnB,KAGN,E,UCrCYC,GAAUjB,EAAAA,EAAAA,GAAOkB,EAAAA,GAAPlB,CAAH,oRCIdmB,EAAgB,CACpBZ,KAAM,GACNM,OAAQ,IAGGO,EAAe,WAC1B,IAAM3B,GAAWS,EAAAA,EAAAA,IAAYP,GACvBQ,GAAWC,EAAAA,EAAAA,MAQXiB,EAAe,SAAC,GAAsB,IAApBd,EAAmB,EAAnBA,KAAMM,EAAa,EAAbA,OAK5B,GAJqBpB,EAAS6B,MAAK,SAAAhB,GACjC,OAAOA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAC5C,IAGCe,MAAM,GAAD,OAAIhB,EAAJ,iCADP,CAIA,IAAMiB,EAAa,CAAEjB,KAAAA,EAAMM,OAAAA,GAC3BV,GAASsB,EAAAA,EAAAA,IAAWD,GAFnB,CAGF,EAED,OACE,SAAC,KAAD,CAAQL,cAAeA,EAAeO,SApBvB,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UACzBP,EAAaM,GAEbC,GACD,EAgBC,UACE,UAACX,EAAD,YACE,qCAEE,SAAC,KAAD,CACEY,KAAK,OACLtB,KAAK,OACLuB,QAAQ,+BACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,SAAC,KAAD,CACEH,KAAK,MACLtB,KAAK,SACLuB,QAAQ,8BACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,6BAIP,E,UC5DYI,EAAcjC,EAAAA,EAAAA,MAAH,iICOXkC,EAAS,WACpB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXuB,GAAQzB,EAAAA,EAAAA,IAAYL,GAM1B,OACE,SAAC,KAAD,CAAQsB,cAXU,GAWlB,UACE,UAACc,EAAD,oCAEE,SAAC,KAAD,CAAOJ,KAAK,OAAOtB,KAAK,SAASoB,MAAOA,EAAOQ,SARrD,SAAkBC,GAChB,IAAMC,EAAcD,EAAME,OAAOX,MACjCxB,GAASoC,EAAAA,EAAAA,IAAeF,GACzB,QASF,EChBc,SAASG,IACtB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXqC,GAAYvC,EAAAA,EAAAA,IAAYX,GAM9B,OAJAmD,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,KAGF,iCACE,SAACyC,EAAA,EAAD,WACE,gDAEF,SAACxB,EAAD,KACA,yBAAMqB,GAAa,4BACnB,SAACP,EAAD,KACA,SAACjC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/Contacts/ContactsList.styled.jsx","components/Contacts/ContactsList.jsx","components/Contacts/ContactsForm.styled.jsx","components/Contacts/ContactsForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectContacts = state => state.contacts.items;\n\n\nexport const selectError = state => state.contacts.error;\n\n\nexport const selectFilter = state => state.filter;","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  font-size: 16px;\n  margin-bottom: 10px;\n\n  button {\n    margin-left: 10px;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Item } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getFilteredContacts = () => {\n    if (contacts) {\n      return contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n\n  return (\n    <ul>\n      {filteredContacts.map(item => {\n        return (\n          <Item key={item.id}>\n            {item.name}: {item.number}\n            <button\n              onClick={() => {\n                dispatch(deleteContact(item.id));\n              }}\n            >\n              Delete\n            </button>\n          </Item>\n        );\n      })}\n    </ul>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n  input {\n    width: 150px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n  button {\n    width: 100px;\n    border-radius: 20px;\n  }\n  border: solid 1px;\n  padding: 10px;\n`;\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { FormBox } from './ContactsForm.styled';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactsForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (value, { resetForm }) => {\n    handleSubmit(value);\n\n    resetForm();\n  };\n\n  const handleSubmit = ({ name, number }) => {\n    const isInContacts = contacts.some(contact => {\n      return contact.name.toLowerCase() === name.toLowerCase();\n    });\n\n    if (isInContacts) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = { name, number};\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\n      <FormBox>\n        <label>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </FormBox>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n  input {\n    margin-top: 10px;\n  }\n`;\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { FilterLabel } from './Filter.styled';\n\nconst initialValues = '';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  function onChange(event) {\n    const filterInput = event.target.value;\n    dispatch(setFilterValue(filterInput));\n  }\n  return (\n    <Formik initialValues={initialValues}>\n      <FilterLabel>\n        Find contacts by name\n        <Field type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n      </FilterLabel>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactsList } from 'components/Contacts/ContactsList';\nimport { ContactsForm } from 'components/Contacts/ContactsForm';\nimport {Filter} from 'components/Filter/Filter'\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactsForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}"],"names":["selectLoading","state","contacts","loading","selectContacts","items","selectFilter","filter","Item","styled","ContactsList","useSelector","dispatch","useDispatch","filteredContacts","contact","name","toLowerCase","includes","getFilteredContacts","map","item","number","onClick","deleteContact","id","FormBox","Form","initialValues","ContactsForm","handleSubmit","some","alert","newContact","addContact","onSubmit","value","resetForm","type","pattern","title","required","FilterLabel","Filter","onChange","event","filterInput","target","setFilterValue","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}